# Author: Akira Kudo
# Created: 2024/03/16
# Last Updated: 2024/04/21

import os

from temper_with_csv_and_hdf.scale_csv_by_n import scale_dlc_label_csv_by_n
from video_related.scale_image_or_mp4_by_n import scale_image_by_n, scale_mp4_by_n


def scale_folder_content_by_n(source_dir : str, 
                              target_dir : str,
                              dir_to_copy_content : list,
                              n : float):
    """
    Traverses the file tree rooted at source_dir recursively, copying
    the directory structure into directories. If the name of the 
    directory is in dir_to_copy_content, copies the content, while
    attempting to scale certain file types by n based on condition.
    
    Scaled file types are:
    - png / jpg
    - mp4
    - csv, if they are dlc label csvs
    - h5/hdf, by converting any csv into hdf (they are usually pairs)

    :param str source_dir: Source directory from which recursive
    copying occurs.
    :param str target_dir: Target directory under which recursive 
    copying occurs. Folder up to target_dir have to exist.
    :param list dir_to_copy_content: Name of directories which files
    are scaled & copied.
    :param float n: Scaling factor we subject special file types to.
    """
    def _from_relative_to_src_to_relative_to_tgt(path : str):
        """
        Converts path that is a subdirectory of source_dir to a subdirectory
        to target_dir, such that the relative position from path to the two
        directories are maintained.
        """
        return path.replace(source_dir, target_dir)
    
    NEW_SCORER = "Akira"

    # walk down the source directory
    for root, dirs, files in os.walk(source_dir):
        # for every subdirectory, we copy them to target
        for dir in dirs:
            to_create_dir = _from_relative_to_src_to_relative_to_tgt(os.path.join(root, dir))
            if not os.path.exists(to_create_dir):
                os.mkdir(to_create_dir)
        # if this directory has its name in dir_to_copy_content, copy files over
        # while applying the appropriate scaling
        if os.path.basename(root) in dir_to_copy_content:
            for file in files:
                file_path_in_src = os.path.join(root, file)
                output_dir_in_target = _from_relative_to_src_to_relative_to_tgt(root)
                if file.lower().endswith(".png") or file.lower().endswith(".jpg"):
                    # we want images (usually training data) to be not renamed
                    scale_image_by_n(img_path=file_path_in_src, n=n, outdir=output_dir_in_target, newname=os.path.basename(file_path_in_src))
                elif file.lower().endswith(".mp4"):
                    # we want mp4s to be renamed by adding the scaling factor - autogenerated when newname=None
                    scale_mp4_by_n(vid_path=file_path_in_src, n=n, outdir=output_dir_in_target, newname=None)
                elif file.lower().endswith(".csv") and "Collected" in file:
                    # we want to adjust video names based on the autogenerated scaling postfix 
                    scale_dlc_label_csv_by_n(csv_path=file_path_in_src, n=n, outdir=output_dir_in_target,
                                            video_postfix=None, new_name=f"CollectedData_{NEW_SCORER}.csv", 
                                            new_scorer=NEW_SCORER, also_do_hdf=True)
                # to be honest, hdf will be taken care of by using also_do_hdf=True with csv
                # elif file.lower().endswith(".h5") or file.lower().endswith(".hdf"):
                #     scale_hdf_via_conversion_to_csv()

def scale_hdf_via_conversion_to_csv(hdf_path : str):
    return None

if __name__ == "__main__":
    N = 0.5
    SOURCE_DIR = r"/media/Data/Raymond Lab/Q175-D2Cre Open Field Males/Q175-D2Cre Open Field Males Brown-Judy-2024-01-12/videos"
    TARGET_DIR = r"/media/Data/Raymond Lab/Q175-D2Cre Open Field Males/Q175-D2Cre Open Field Males Brown Halfscale-Akira-2024-03-15/videos"
    DIR_TO_COPY_CONTENT = [
    "20220211070325_301533_f3_",
    "20220228223808_320151_m1_openfield",
    "20220228231804_320151_m2_openfield",
    "20230102092905_363451_f1_openfield",
    "20230107123308_362816_m1_openfield",
    "20230107131118_363453_m1_openfield",
    "additional_Q175_videos",
    "added_2024_04_19"
    ]

    scale_folder_content_by_n(source_dir=SOURCE_DIR, target_dir=TARGET_DIR,
                              dir_to_copy_content=DIR_TO_COPY_CONTENT,
                              n=N)
